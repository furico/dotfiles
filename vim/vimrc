scriptencoding utf-8
" Plugins {{{
call plug#begin('~/.vim/plugged')
Plug 'ctrlpvim/ctrlp.vim'
Plug 'nanotech/jellybeans.vim'
" Automatically executes filetype plugin indent on and syntax enable.
call plug#end()
" }}}
" Basic {{{
set hidden
set modelines=1
set clipboard+=unnamed
set belloff=all
" }}}
" Searching {{{
set hlsearch
set ignorecase
set smartcase
set incsearch
" }}}
" Backups {{{
set nobackup
set nowritebackup
set noswapfile
set noundofile
" }}}
" Spaces & Tabs {{{
set shiftwidth=2
set tabstop=2
set expandtab
" }}}
" UI {{{
set number
set showcmd
"set cursorline
set list lcs=eol:$,tab:>-
set laststatus=2
set cmdheight=2
set statusline=%r%w%f%m%=[%{&fileformat}][%{&fileencoding}]%y[%3p%%][%3l:%-3c]
" }}}}
" Colors {{{
set t_Co=256
"colorscheme desert
colorscheme jellybeans
" }}}
" Keymaps {{{
let mapleader = "\<Space>"
nnoremap Y y$
noremap <CR> o<Esc>
nnoremap <silent> <Leader>w :update<CR>
nnoremap <silent> <Esc><Esc> :nohlsearch<CR>
nnoremap <Tab> <C-w><C-w>
nnoremap <S-Tab> <C-w>W
nnoremap <silent> <C-n> :bn<CR>
nnoremap <silent> <Leader>s :ScrapFile<CR>
nnoremap <silent> <Leader>ss :SaveScrapFile<CR>
" }}}
" AutoGroups {{{
augroup vimrc
  autocmd!
  " Run Current VimScript
  autocmd FileType vim nnoremap <buffer> <Leader>r :so%<CR>
augroup END
" }}}
" Custom Command {{{
" Open Scrap File
command! -nargs=0 ScrapFile call s:open_scrap_file()
function! s:open_scrap_file()
  let l:scrap_dir = $HOME . '/.vim_scrap'. strftime('/%Y/%m')
  if !isdirectory(l:scrap_dir)
    call mkdir(l:scrap_dir, 'p')
  endif

  let l:filename = input('Scrap File: ', l:scrap_dir.strftime('/%Y-%m-%d-%H%M%S.'))
  if l:filename != ''
    execute 'edit ' . l:filename
  endif
endfunction

" Save Scrap File
command! -nargs=0 SaveScrapFile call s:save_scrap_file()
function! s:save_scrap_file()
  let l:scrap_dir = $HOME . '/.vim_scrap'. strftime('/%Y/%m')
  if !isdirectory(l:scrap_dir)
    call mkdir(l:scrap_dir, 'p')
  endif

  let l:filename = input('Save As: ', l:scrap_dir.strftime('/%Y-%m-%d-%H%M%S.'))
  if l:filename != ''
    execute 'write ' . l:filename
  endif
endfunction
"}}}
" Plugin Settings{{{
" ctrlp
let g:ctrlp_cmd = 'CtrlPBuffer'
" }}}

" vim:foldmethod=marker
